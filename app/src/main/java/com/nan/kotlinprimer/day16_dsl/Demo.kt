package com.nan.kotlinprimer.day16_dsl

import java.io.File

/**
 * DSL 是什么
 * 首先来看 DSL 是什么？
 * 它的英文全称：Domain Specific Language，翻译成中文则为：领域专用语言，通俗的理解就是它用于特定领域的语言或者代码风格，DSL 可以分为外部 DSL 和 内部 DSL:
 * 例如像 JSON 等这种不依赖其他编程语言的特定格式的语言，就属于外部 DSL；与之对应的需要依赖某种编程语言来实现的 DSL 则称之为内部 DSL，例如 Anko 就是 Kotlin 官方为大家提供的一个可以通过代码实现 Android 布局的 DSL 库，它依赖的就是 Kotlin 语言，属于内部 DSL。
 *
 * DSL 优点
 * 以 JSON 为例，做为数据传输所使用的 DSL 语言，输出端和接收端无需关心对方的编程语言，可以极大的提高开发效率，减少沟通成本。
 *
 * 自定义DSL示例
 */
fun main(args: Array<String>) {
    val result =
        html {
            head {
                title { +"XML encoding with Kotlin" }
            }
            body {
                h1 { +"XML encoding with Kotlin" }
                p { +"this format can be used as an alternative markup to XML" }

                // an element with attributes and text content
                a(href = "http://kotlinlang.org") { +"Kotlin" }

                // mixed content
                p {
                    +"This is some"
                    b { +"mixed" }
                    +"text. For more see the"
                    a(href = "http://kotlinlang.org") { +"Kotlin" }
                    +"project"
                }
                p { +"some text" }

                // content generated by
                p {
                    for (arg in args)
                        +arg
                }
            }
        }
    val htmlFile = File("test.html")
    htmlFile.takeIf { it.exists() }?.delete()
    htmlFile.writeText(result.toString())
}

interface Element {
    fun render(builder: StringBuilder, indent: String)
}

class TextElement(val text: String) : Element {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

@DslMarker
annotation class HtmlTagMarker

@HtmlTagMarker
abstract class Tag(val name: String) : Element {
    val children = arrayListOf<Element>()
    val attributes = hashMapOf<String, String>()

    protected fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String {
        val builder = StringBuilder()
        for ((attr, value) in attributes) {
            builder.append(" $attr=\"$value\"")
        }
        return builder.toString()
    }

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML : TagWithText("html") {
    fun head(init: Head.() -> Unit) = initTag(Head(), init)

    fun body(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head : TagWithText("head") {
    fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    fun b(init: B.() -> Unit) = initTag(B(), init)
    fun p(init: P.() -> Unit) = initTag(P(), init)
    fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body : BodyTag("body")
class B : BodyTag("b")
class P : BodyTag("p")
class H1 : BodyTag("h1")

class A : BodyTag("a") {
    var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}